import logging
import json
import asyncio
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from config import BOT_TOKEN, CLINIC_INFO, SPECIALIZATIONS, DOCTORS, AVAILABLE_TIMES, ADMIN_ID
from excel_manager import ExcelManager
try:
    from sheets_manager import SheetsManager
except Exception:
    SheetsManager = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_SPECIALIZATION, CHOOSING_DOCTOR, CHOOSING_DATE, CHOOSING_TIME, ENTERING_NAME, ENTERING_PHONE = range(6)
REVIEW_RATING, REVIEW_TEXT = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: Google Sheets –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏–Ω–∞—á–µ Excel
if SheetsManager is not None and os.getenv('GOOGLE_SHEETS_ID'):
    excel_manager = SheetsManager()
else:
    excel_manager = ExcelManager()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
excel_sync_started = False

# –õ—ë–≥–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Excel –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (—á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
known_active_appointment_keys = set()
known_active_review_keys = set()

# –ö–µ—à –∏ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ¬´–ú–æ–∏ –∑–∞–ø–∏—Å–∏¬ª –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
my_appts_cache = {}
my_appts_view = {}

def build_my_appts_text_and_keyboard(user_id: int):
    appointments = excel_manager.get_appointments_by_user(user_id)
    keyboard_rows = []
    if not appointments:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
        my_appts_cache[user_id] = []
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        return text, InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–∫–æ–ª–æ–Ω–∫–∞ 9)
    try:
        appointments.sort(key=lambda r: str(r[8] or ''), reverse=True)
    except Exception:
        pass

    my_appts_cache[user_id] = appointments

    text = "üóÇ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for i, a in enumerate(appointments, start=1):
        date, time, name, phone, doctor, specialization, status, uid, created_at = a
        text += f"{i}. üìÖ {date} {time}\n"
        text += f"   üë®‚Äç‚öïÔ∏è {doctor} ({specialization})\n"
        text += f"   üë§ {name}\n"
        text += f"   üìû {phone}\n"
        text += f"   üîñ –°—Ç–∞—Ç—É—Å: {status}\n"
        text += f"   üïí –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã (>24—á –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞)
        can_cancel = False
        try:
            from datetime import datetime as dt
            if isinstance(date, str):
                appt_date = dt.strptime(date, "%d.%m.%Y")
            else:
                appt_date = dt.combine(date, dt.min.time()) if hasattr(date, 'year') else None
            appt_dt = None
            if appt_date and isinstance(time, str):
                h, m = time.split(":")
                appt_dt = appt_date.replace(hour=int(h), minute=int(m))
            if appt_dt and (appt_dt - dt.now()).total_seconds() > 24*3600 and str(status).lower() not in ["–æ—Ç–º–µ–Ω–µ–Ω–∞", "cancelled"]:
                can_cancel = True
        except Exception:
            pass
        if can_cancel:
            keyboard_rows.append([InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{i}", callback_data=f"cancel_appt_{i}")])
        text += "\n"

    if not keyboard_rows:
        text += "\n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –±–æ–ª–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –ø—Ä–∏—ë–º–∞."

    reply_markup = InlineKeyboardMarkup(keyboard_rows + [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    return text, reply_markup

async def refresh_my_appts_message_for_user(application: Application, user_id: int):
    view = my_appts_view.get(user_id)
    if not view:
        return
    chat_id, message_id = view
    try:
        text, reply_markup = build_my_appts_text_and_keyboard(user_id)
        await application.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
    except Exception:
        pass

def _normalize_date_str(value):
    try:
        if isinstance(value, str):
            return value
        from datetime import datetime as dt
        return value.strftime("%d.%m.%Y")
    except Exception:
        return str(value)

def _normalize_created_str(value):
    try:
        if isinstance(value, str):
            return value
        from datetime import datetime as dt
        return value.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        return str(value)

def build_active_appointment_keys():
    rows = excel_manager.get_appointments()
    keys = set()
    for row in rows:
        try:
            date, time, _name, _phone, doctor, _spec, status, user_id, created_at = row
            status_str = str(status).lower()
            if status_str in ["–æ—Ç–º–µ–Ω–µ–Ω–∞", "–æ—Ç–º–µ–Ω—ë–Ω", "cancelled", "canceled", "cancel"]:
                continue
            keys.add((
                str(user_id),
                _normalize_date_str(date),
                str(time),
                str(doctor),
                _normalize_created_str(created_at),
            ))
        except Exception:
            continue
    return keys

def build_active_review_keys():
    rows = excel_manager.get_reviews()
    keys = set()
    for row in rows:
        try:
            date, name, rating, review_text, user_id, status = row
            status_str = str(status).lower()
            if status_str in ["—É–¥–∞–ª–µ–Ω", "—É–¥–∞–ª—ë–Ω", "—Å–∫—Ä—ã—Ç", "–æ—Ç–∫–ª–æ–Ω–µ–Ω", "–æ—Ç–∫–ª–æ–Ω—ë–Ω", "deleted", "hidden", "rejected"]:
                continue
            keys.add((
                str(user_id),
                _normalize_date_str(date),
                str(rating),
                str(review_text),
            ))
        except Exception:
            continue
    return keys

async def sync_excel_changes(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–≤–µ—Ä–∫–∞ Excel: —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö –∏ —Å–∫—Ä—ã—Ç—ã—Ö/—É–¥–∞–ª—ë–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö."""
    global known_active_appointment_keys, known_active_review_keys
    try:
        current_appts = build_active_appointment_keys()
        current_reviews = build_active_review_keys()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if not known_active_appointment_keys and not known_active_review_keys:
            known_active_appointment_keys = current_appts
            known_active_review_keys = current_reviews
            return

        removed_appts = known_active_appointment_keys - current_appts
        removed_reviews = known_active_review_keys - current_reviews

        for user_id_str, date_str, time_str, doctor_str, _created_str in removed_appts:
            try:
                await context.application.bot.send_message(
                    chat_id=int(user_id_str),
                    text=(
                        f"–í–∞—à—É –∑–∞–ø–∏—Å—å –Ω–∞ {date_str} {time_str} –∫ {doctor_str} –æ—Ç–º–µ–Ω–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n"
                        f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ."
                    ),
                )
            except Exception:
                pass

        for user_id_str, date_str, rating_str, review_text in removed_reviews:
            try:
                preview = (review_text[:120] + '‚Ä¶') if len(review_text) > 120 else review_text
                await context.application.bot.send_message(
                    chat_id=int(user_id_str),
                    text=(
                        f"–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç {date_str} (–æ—Ü–µ–Ω–∫–∞ {rating_str}) –±—ã–ª —É–¥–∞–ª—ë–Ω/—Å–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                        f"–¢–µ–∫—Å—Ç: {preview}"
                    ),
                )
            except Exception:
                pass

        known_active_appointment_keys = current_appts
        known_active_review_keys = current_reviews
    except Exception:
        # –ù–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–Ω—è—Ç/–Ω–µ—á–∏—Ç–∞–µ–º
        pass

async def background_excel_sync(application: Application) -> None:
    """–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ JobQueue: —Ü–∏–∫–ª —Å asyncio.sleep."""
    global known_active_appointment_keys, known_active_review_keys
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–Ω–∏–º–æ–∫
    try:
        known_active_appointment_keys = build_active_appointment_keys()
        known_active_review_keys = build_active_review_keys()
    except Exception:
        known_active_appointment_keys = set()
        known_active_review_keys = set()
    while True:
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            try:
                excel_manager.flush_pending_ops()
            except Exception:
                pass
            current_appts = build_active_appointment_keys()
            current_reviews = build_active_review_keys()
            removed_appts = known_active_appointment_keys - current_appts
            removed_reviews = known_active_review_keys - current_reviews
            for user_id_str, date_str, time_str, doctor_str, _created_str in removed_appts:
                try:
                    await application.bot.send_message(
                        chat_id=int(user_id_str),
                        text=(
                            f"–í–∞—à—É –∑–∞–ø–∏—Å—å –Ω–∞ {date_str} {time_str} –∫ {doctor_str} –æ—Ç–º–µ–Ω–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n"
                            f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ."
                        ),
                    )
                    await refresh_my_appts_message_for_user(application, int(user_id_str))
                except Exception:
                    pass
            for user_id_str, date_str, rating_str, review_text in removed_reviews:
                try:
                    preview = (review_text[:120] + '‚Ä¶') if len(review_text) > 120 else review_text
                    await application.bot.send_message(
                        chat_id=int(user_id_str),
                        text=(
                            f"–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç {date_str} (–æ—Ü–µ–Ω–∫–∞ {rating_str}) –±—ã–ª —É–¥–∞–ª—ë–Ω/—Å–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                            f"–¢–µ–∫—Å—Ç: {preview}"
                        ),
                    )
                except Exception:
                    pass
            known_active_appointment_keys = current_appts
            known_active_review_keys = current_reviews
        except Exception:
            pass
        await asyncio.sleep(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–∫–æ–≥–¥–∞ —É–∂–µ –µ—Å—Ç—å event loop)
    global excel_sync_started
    if not excel_sync_started:
        try:
            context.application.create_task(background_excel_sync(context.application))
            excel_sync_started = True
        except Exception:
            pass
    welcome_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {CLINIC_INFO['name']}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data="appointment")],
        [InlineKeyboardButton("üóÇ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments")],
        [InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –ù–∞—à–∏ –≤—Ä–∞—á–∏", callback_data="doctors")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –∫–ª–∏–Ω–∏–∫–µ", callback_data="clinic_info")],
        [InlineKeyboardButton("üí¨ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="reviews")],
        [InlineKeyboardButton("üîî –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏", callback_data="news")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ /start –Ω–µ –Ω–∞–∂–∏–º–∞–ª–∏
    global excel_sync_started
    if not excel_sync_started:
        try:
            context.application.create_task(background_excel_sync(context.application))
            excel_sync_started = True
        except Exception:
            pass
    
    if query.data == "appointment":
        await show_specializations(update, context)
    elif query.data == "my_appointments":
        await show_my_appointments(update, context)
    elif query.data == "doctors":
        await show_doctors(update, context)
    elif query.data == "clinic_info":
        await show_clinic_info(update, context)
    elif query.data == "consultation":
        await start_consultation(update, context)
    elif query.data == "reviews":
        await show_reviews_menu(update, context)
    elif query.data == "news":
        await show_news(update, context)
    elif query.data == "subscribe_news":
        await subscribe_news(update, context)
    elif query.data == "view_reviews":
        await show_reviews(update, context)
    elif query.data.startswith("cancel_appt_"):
        try:
            idx = int(query.data.split("_")[-1])
        except Exception:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        await cancel_appointment_by_index(update, context, idx)
    elif query.data.startswith("spec_"):
        specialization = query.data[5:]
        await show_doctors_by_specialization(update, context, specialization)
    elif query.data.startswith("doctor_"):
        doctor_info = query.data[7:]
        await show_doctor_details(update, context, doctor_info)
    elif query.data.startswith("date_"):
        date = query.data[5:]
        await show_available_times(update, context, date)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø–∏—Å–∏
    elif query.data == "back_to_menu":
        await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data="appointment")],
        [InlineKeyboardButton("üóÇ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments")],
        [InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –ù–∞—à–∏ –≤—Ä–∞—á–∏", callback_data="doctors")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –∫–ª–∏–Ω–∏–∫–µ", callback_data="clinic_info")],
        [InlineKeyboardButton("üí¨ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="reviews")],
        [InlineKeyboardButton("üîî –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏", callback_data="news")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def show_specializations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    keyboard = []
    for spec in SPECIALIZATIONS:
        keyboard.append([InlineKeyboardButton(spec, callback_data=f"spec_{spec}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞:", reply_markup=reply_markup
    )

async def show_doctors_by_specialization(update: Update, context: ContextTypes.DEFAULT_TYPE, specialization: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    doctors = DOCTORS.get(specialization, [])
    
    if not doctors:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="appointment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–∞—á–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{specialization}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=reply_markup
        )
        return
    
    text = f"–í—Ä–∞—á–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{specialization}':\n\n"
    keyboard = []
    
    for i, doctor in enumerate(doctors):
        text += f"{doctor['photo']} {doctor['name']}\n"
        text += f"–°—Ç–∞–∂: {doctor['experience']}\n"
        text += f"{doctor['description']}\n\n"
        
        keyboard.append([InlineKeyboardButton(
            f"üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ {doctor['name'].split()[0]}", 
            callback_data=f"doctor_{specialization}_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="appointment")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def show_doctor_details(update: Update, context: ContextTypes.DEFAULT_TYPE, doctor_info: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—Ä–∞—á–∞ –∏ –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏"""
    specialization, doctor_index = doctor_info.split("_")
    doctor_index = int(doctor_index)
    
    doctors = DOCTORS.get(specialization, [])
    if doctor_index >= len(doctors):
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –≤—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    doctor = doctors[doctor_index]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
    dates = []
    for i in range(14):
        date = datetime.now() + timedelta(days=i+1)
        if date.weekday() < 5:  # –¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏–µ –¥–Ω–∏
            dates.append(date.strftime("%d.%m.%Y"))
    
    text = f"–í—ã–±—Ä–∞–Ω –≤—Ä–∞—á: {doctor['name']}\n"
    text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}\n"
    text += f"–°—Ç–∞–∂: {doctor['experience']}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞:"
    
    keyboard = []
    for i in range(0, len(dates), 3):
        row = []
        for j in range(3):
            if i + j < len(dates):
                row.append(InlineKeyboardButton(dates[i+j], callback_data=f"date_{dates[i+j]}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"spec_{specialization}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–∞—á–µ
    user_id = update.effective_user.id
    user_data[user_id] = {
        'doctor': doctor,
        'specialization': specialization
    }
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def show_available_times(update: Update, context: ContextTypes.DEFAULT_TYPE, date: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è"""
    text = f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
    user_id = update.effective_user.id
    doctor_name = user_data.get(user_id, {}).get('doctor', {}).get('name') if user_id in user_data else None
    booked = set()
    if doctor_name:
        booked = excel_manager.get_booked_times(doctor_name, date)

    available_slots = [t for t in AVAILABLE_TIMES if t not in booked]

    keyboard = []
    for i in range(0, len(available_slots), 3):
        row = []
        for j in range(3):
            if i + j < len(available_slots):
                time = available_slots[i+j]
                row.append(InlineKeyboardButton(time, callback_data=f"time_{time}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="appointment")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    user_id = update.effective_user.id
    if user_id in user_data:
        user_data[user_id]['date'] = date
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def start_appointment_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    callback = update.callback_query
    selected_time = None
    if callback and callback.data and callback.data.startswith("time_"):
        selected_time = callback.data[5:]
    
    if user_id in user_data and selected_time:
        user_data[user_id]['time'] = selected_time
    
    await update.callback_query.edit_message_text(
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    return ENTERING_NAME

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    user_id = update.effective_user.id
    if user_id in user_data:
        user_data[user_id]['name'] = update.message.text
    
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ENTERING_PHONE

async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    if user_id in user_data:
        user_data[user_id]['phone'] = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        data = user_data[user_id]
        doctor = data['doctor']
        specialization = data['specialization']
        date = data['date']
        time = data['time']
        name = data['name']
        phone = data['phone']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Ñ–∞–π–ª
        success = excel_manager.add_appointment(
            date, time, name, phone, doctor['name'], specialization, user_id
        )
        
        if success:
            confirmation_text = f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            confirmation_text += f"–í—Ä–∞—á: {doctor['name']}\n"
            confirmation_text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}\n"
            confirmation_text += f"–î–∞—Ç–∞: {date}\n"
            confirmation_text += f"–í—Ä–µ–º—è: {time}\n"
            confirmation_text += f"–§–ò–û: {name}\n"
            confirmation_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            confirmation_text += "–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–∏–µ–º–∞."
            
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(confirmation_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]
    
    return ConversationHandler.END

async def show_doctors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π"""
    text = "–ù–∞—à–∏ –≤—Ä–∞—á–∏:\n\n"
    keyboard = []
    
    for specialization, doctors in DOCTORS.items():
        text += f"üè• {specialization}:\n"
        for doctor in doctors:
            text += f"  {doctor['photo']} {doctor['name']} - {doctor['experience']}\n"
        text += "\n"
    
    keyboard.append([InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data="appointment")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def show_clinic_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–Ω–∏–∫–µ"""
    text = f"üè• {CLINIC_INFO['name']}\n\n"
    if CLINIC_INFO.get('description'):
        text += f"{CLINIC_INFO['description']}\n\n"
    text += f"üìç –ê–¥—Ä–µ—Å: {CLINIC_INFO['address']}\n"
    text += f"‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n{CLINIC_INFO['working_hours']}\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {CLINIC_INFO['phone']}\n"
    if CLINIC_INFO.get('email'):
        text += f"‚úâÔ∏è Email: {CLINIC_INFO['email']}\n"
    text += f"üåê –°–∞–π—Ç: {CLINIC_INFO['website']}"
    
    keyboard = [
        [InlineKeyboardButton("üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", url=CLINIC_INFO['map_url'])],
        [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=CLINIC_INFO['website'])],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    except Exception:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä., –∏–∑-–∑–∞ URL-—Å—Ö–µ–º—ã), –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)

async def start_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    text = "üí¨ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n\n"
    text += "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à –≤—Ä–∞—á —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
    text += "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    context.user_data['waiting_for_consultation'] = True

async def handle_consultation_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if context.user_data.get('waiting_for_consultation'):
        user = update.effective_user
        question = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Ñ–∞–π–ª
        success = excel_manager.add_consultation(question, user.id)
        
        if success:
            await update.message.reply_text(
                "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—Ä–∞—á —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['waiting_for_consultation'] = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)

async def show_reviews_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤"""
    text = "‚≠ê –û—Ç–∑—ã–≤—ã\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="write_review")],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="view_reviews")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def show_my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    appointments = excel_manager.get_appointments_by_user(user.id)

    keyboard_rows = []
    if not appointments:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    else:
        text = "üóÇ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–∫–æ–ª–æ–Ω–∫–∞ 9)
        try:
            appointments.sort(key=lambda r: str(r[8] or ''), reverse=True)
        except Exception:
            pass
        context.user_data['my_appts'] = []
        for i, a in enumerate(appointments, start=1):
            date, time, name, phone, doctor, specialization, status, uid, created_at = a
            text += f"{i}. üìÖ {date} {time}\n"
            text += f"   üë®‚Äç‚öïÔ∏è {doctor} ({specialization})\n"
            text += f"   üë§ {name}\n"
            text += f"   üìû {phone}\n"
            text += f"   üîñ –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"   üïí –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
            can_cancel = False
            try:
                from datetime import datetime as dt
                if isinstance(date, str):
                    appt_date = dt.strptime(date, "%d.%m.%Y")
                else:
                    appt_date = dt.combine(date, dt.min.time()) if hasattr(date, 'year') else None
                appt_dt = None
                if appt_date and isinstance(time, str):
                    h, m = time.split(":")
                    appt_dt = appt_date.replace(hour=int(h), minute=int(m))
                if appt_dt and (appt_dt - dt.now()).total_seconds() > 24*3600 and str(status).lower() not in ["–æ—Ç–º–µ–Ω–µ–Ω–∞", "cancelled"]:
                    can_cancel = True
            except Exception:
                pass
            if can_cancel:
                keyboard_rows.append([InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{i}", callback_data=f"cancel_appt_{i}")])
            text += "\n"
            context.user_data['my_appts'].append(a)
        if not keyboard_rows:
            text += "\n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –±–æ–ª–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –ø—Ä–∏—ë–º–∞."

    keyboard = keyboard_rows + [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    sent = await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    try:
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ edit_message_text –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Message –≤ PTB 22.x
        my_appts_view[user.id] = (sent.chat.id, sent.message_id)
    except Exception:
        pass

async def start_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    keyboard = []
    for i in range(1, 6):
        stars = "‚≠ê" * i
        keyboard.append([InlineKeyboardButton(f"{stars} ({i})", callback_data=f"rating_{i}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reviews")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:", reply_markup=reply_markup
    )
    return REVIEW_RATING

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    rating = int(query.data.split("_")[1])
    context.user_data['rating'] = rating
    
    await query.edit_message_text(
        f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤–µ–∑–¥. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:"
    )
    return REVIEW_TEXT

async def handle_review_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
    user = update.effective_user
    review_text = update.message.text
    rating = context.user_data.get('rating', 5)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Ñ–∞–π–ª
    success = excel_manager.add_review(
        f"{user.first_name} {user.last_name or ''}".strip(),
        rating,
        review_text,
        user.id
    )
    
    if success:
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'rating' in context.user_data:
        del context.user_data['rating']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)
    return ConversationHandler.END

async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã"""
    reviews = excel_manager.get_reviews()
    
    if not reviews:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
    else:
        text = "üìù –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:\n\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ
        for review in reviews:
            date, name, rating, review_text, user_id, status = review
            stars = "‚≠ê" * int(rating)
            text += f"{stars}\n"
            text += f"üë§ {name}\n"
            text += f"üí¨ {review_text}\n"
            text += f"üìÖ {date}\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="write_review")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reviews")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def show_news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏"""
    text = "üîî –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏\n\n"
    text += "üéâ –¢–æ–ª—å–∫–æ –≤ –∞–≤–≥—É—Å—Ç–µ! –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞ –∑–∞ 500‚ÇΩ –≤–º–µ—Å—Ç–æ 1000‚ÇΩ\n\n"
    text += "üÜï –ù–æ–≤—ã–π –≤—Ä–∞—á-–Ω–µ–≤—Ä–æ–ª–æ–≥ –≤ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ\n\n"
    text += "üíâ –ê–∫—Ü–∏—è –Ω–∞ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏ - —Å–∫–∏–¥–∫–∞ 20%\n\n"
    text += "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏—è—Ö!"
    
    keyboard = [
        [InlineKeyboardButton("üìß –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe_news")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

async def subscribe_news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel —Ñ–∞–π–ª
    success = excel_manager.add_subscriber(user.id, f"{user.first_name} {user.last_name or ''}".strip())
    
    if success:
        await update.callback_query.edit_message_text(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–∫—Ü–∏–π!"
        )
    else:
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def cancel_appointment_by_index(update: Update, context: ContextTypes.DEFAULT_TYPE, index: int) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —É–¥–∞–ª–∏—Ç—å –µ—ë –∏–∑ Excel"""
    appts = context.user_data.get('my_appts', [])
    if index < 1 or index > len(appts):
        await update.callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏", show_alert=True)
        return
    date, time, name, phone, doctor, specialization, status, uid, created_at = appts[index - 1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 24 —á–∞—Å–æ–≤
    from datetime import datetime as dt
    try:
        if isinstance(date, str):
            appt_date = dt.strptime(date, "%d.%m.%Y")
        else:
            appt_date = dt.combine(date, dt.min.time()) if hasattr(date, 'year') else None
        appt_dt = None
        if appt_date and isinstance(time, str):
            h, m = time.split(":")
            appt_dt = appt_date.replace(hour=int(h), minute=int(m))
        if not appt_dt or (appt_dt - dt.now()).total_seconds() <= 24*3600:
            await update.callback_query.answer("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –±–æ–ª–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –ø—Ä–∏—ë–º–∞", show_alert=True)
            return
    except Exception:
        await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Excel
    ok = excel_manager.delete_appointment(update.effective_user.id, str(date), str(time), str(doctor), str(created_at))
    if ok:
        await update.callback_query.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ —ç–∫—Ä–∞–Ω
        await show_my_appointments(update, context)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ ¬´–ú–æ–∏ –∑–∞–ø–∏—Å–∏¬ª, –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await refresh_my_appts_message_for_user(context.application, update.effective_user.id)
        except Exception:
            pass
    else:
        await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏", show_alert=True)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not BOT_TOKEN:
        raise RuntimeError(
            "BOT_TOKEN is not set. Create a .env file with BOT_TOKEN=your_token or set the environment variable."
        )
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π Excel-—Ñ–∞–π–ª
    async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        admin_id = ADMIN_ID
        if admin_id and str(update.effective_user.id) != str(admin_id):
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        try:
            # Excel-—Ñ–∞–π–ª: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            if hasattr(excel_manager, 'filename') and excel_manager.filename and os.path.exists(getattr(excel_manager, 'filename', '')):
                await update.message.reply_document(document=open(excel_manager.filename, 'rb'))
                return
            # Google Sheets: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
            if hasattr(excel_manager, 'spreadsheet'):
                sheet_url = getattr(excel_manager.spreadsheet, 'url', None)
                if not sheet_url and hasattr(excel_manager, 'spreadsheet_id'):
                    sheet_url = f"https://docs.google.com/spreadsheets/d/{excel_manager.spreadsheet_id}"
                if sheet_url:
                    await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {sheet_url}")
                    return
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("export", export_excel))
    
    # ConversationHandler –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
    appointment_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_appointment_form, pattern="^time_")],
        states={
            ENTERING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTERING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(appointment_conv_handler)
    
    # ConversationHandler –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    review_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_review, pattern="^write_review$")],
        states={
            REVIEW_RATING: [CallbackQueryHandler(handle_rating, pattern="^rating_")],
            REVIEW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(review_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–ø–æ—Å–ª–µ ConversationHandler, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∏—Ö —Å–æ–±—ã—Ç–∏—è)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_consultation_message))
    
    # –§–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (—Å–º. start/button_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
